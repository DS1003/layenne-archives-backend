// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  username String    @unique
  email    String    @unique
  password String
  photo    String?   // URL de la photo, optionnelle
  role     String    @default("user") // Champ de rôle pour identifier les administrateurs et les utilisateurs réguliers
  posts    Post[]
  likes    Like[]    // Ajouter les likes pour l'utilisateur
  comments Comment[] // Ajouter les commentaires pour l'utilisateur
}

model File {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  type       String
  name       String
  uploadedAt DateTime @default(now())
  posts      Post[]
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  isPublic    Boolean   @default(true)
  file        File?     @relation(fields: [fileId], references: [id])
  fileId      String?   @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  likes       Like[]    @relation("PostLikes")
  comments    Comment[] @relation("PostComments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  post      Post     @relation("PostLikes", fields: [postId], references: [id]) // Spécifier le nom de la relation
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String
  post      Post     @relation("PostComments", fields: [postId], references: [id]) // Spécifier le nom de la relation
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
